# ==============================================================================
# VQC Football Play-Type Classifier
# ==============================================================================
# This script builds a Variational Quantum Classifier (VQC) using Qiskit
# to predict whether a football play will be a run or a pass based on
# game situation data.
#
# The script performs the following steps:
# 1. Loads the pre-processed Ohio State 2024-25 season data into a pandas DataFrame.
# 2. Separates the data into features (X) and the target variable (y).
# 3. Splits the data into training and testing sets.
# 4. Scales the feature data for better model performance.
# 5. Defines the quantum components: a feature map and a variational ansatz.
# 6. Constructs and trains the VQC model using a classical optimizer.
# 7. Evaluates the VQC's accuracy on the test set.
# 8. As a baseline, it also trains and evaluates a classical Support Vector Machine (SVM)
#    on the same data to provide a performance comparison.
# ==============================================================================

# Qiskit and Qiskit Machine Learning imports
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from qiskit.primitives import Sampler  # Updated import
from qiskit_algorithms.optimizers import SPSA  # Updated import
from qiskit.circuit.library import ZZFeatureMap, RealAmplitudes
from qiskit_machine_learning.algorithms.classifiers import VQC

# --- 1. Data Loading and Preparation ---

# We have combined all the data from the 12 games into a single list of lists.
# Each inner list represents a single offensive play.
# Columns: Down, Distance, Yards From Own Goal, Total Seconds Left, Score Difference, Play Type (1=Pass, 0=Run)
full_season_data = [
    # Akron (2024-25)
    [1, 10, 32, 3593, 0, 0], [2, 1, 41, 3593, 0, 1], [3, 6, 36, 3593, 0, 1],
    [1, 10, 25, 3224, -3, 1], [2, 10, 25, 3224, -3, 1], [3, 10, 25, 3224, -3, 1],
    [1, 10, 36, 3224, -3, 0], [2, 9, 37, 3224, -3, 1], [1, 10, 56, 3224, -3, 0],
    [2, 9, 57, 3224, -3, 0], [3, 1, 65, 3041, -3, 0], [1, 10, 66, 3041, -3, 1],
    [2, 4, 72, 3041, -3, 0], [3, 4, 72, 3041, -3, 1], [1, 10, 80, 3041, -3, 1],
    [2, 10, 80, 3041, -3, 0], [3, 6, 84, 2864, -3, 1], [1, 10, 41, 2700, 4, 0],
    [1, 10, 54, 2700, 4, 1], [1, 10, 70, 2700, 4, 1], [2, 10, 70, 2700, 4, 0],
    [3, 7, 73, 2700, 4, 0], [4, 5, 75, 2579, 4, 1], [1, 10, 67, 2523, 4, 0],
    [1, 10, 78, 2523, 4, 1], [2, 10, 78, 2523, 4, 1], [3, 10, 78, 2523, 4, 1],
    [1, 10, 24, 2340, 7, 0], [2, 5, 29, 2340, 7, 1], [1, 10, 41, 2340, 7, 0],
    [1, 10, 53, 2259, 7, 0], [2, 8, 55, 2259, 7, 0], [3, 8, 55, 2259, 7, 1],
    [1, 10, 71, 2259, 7, 0], [1, 10, 90, 2259, 7, 0], [2, 9, 91, 2070, 7, 1],
    [1, 10, 35, 1864, 14, 1], [2, 10, 35, 1864, 14, 1], [3, 7, 38, 1864, 14, 0],
    [1, 10, 40, 1425, 14, 0], [1, 10, 53, 1425, 14, 1], [1, 2, 98, 1373, 14, 0],
    [1, 10, 25, 1137, 25, 1], [1, 10, 37, 1137, 25, 0], [1, 10, 58, 1137, 25, 1],
    [2, 4, 64, 1137, 25, 0], [3, 2, 66, 1137, 25, 0], [1, 10, 72, 1137, 25, 0],
    [1, 10, 87, 1137, 25, 1], [2, 1, 96, 901, 25, 0], [1, 10, 53, 729, 32, 1],
    [2, 6, 57, 729, 32, 1], [3, 4, 59, 729, 32, 0], [1, 10, 66, 616, 32, 1],
    [1, 10, 5, 433, 39, 0], [2, 7, 8, 433, 39, 0], [3, 6, 9, 433, 39, 1],
    [1, 10, 15, 433, 39, 0], [2, 7, 18, 433, 39, 0], [3, 2, 23, 433, 39, 0],
    [1, 10, 32, 433, 39, 1], [2, 10, 32, 433, 39, 0], [3, 6, 36, 433, 39, 1],
    [1, 10, 13, 21, 46, 0],
    # Western Michigan (2024-25)
    [1, 10, 45, 3219, 0, 1], [2, 5, 50, 3219, 0, 1], [1, 10, 60, 3219, 0, 1],
    [1, 10, 70, 3219, 0, 1], [1, 9, 91, 3219, 0, 0], [2, 3, 97, 3064, 0, 0],
    [1, 10, 25, 2788, 7, 0], [2, 6, 29, 2788, 7, 1], [3, 2, 33, 2788, 7, 1],
    [1, 20, 30, 2640, 7, 1], [1, 10, 27, 2561, 14, 1], [1, 10, 42, 2561, 14, 1],
    [1, 10, 60, 2561, 14, 1], [1, 10, 77, 2561, 14, 1], [2, 10, 77, 2462, 14, 0],
    [1, 7, 23, 2057, 21, 0], [2, 4, 26, 2057, 21, 1], [1, 10, 31, 2057, 21, 0],
    [1, 10, 45, 2057, 21, 1], [2, 10, 45, 2057, 21, 0], [3, 8, 47, 2057, 21, 1],
    [1, 10, 35, 1785, 21, 1], [1, 10, 70, 1785, 21, 1], [2, 10, 70, 1785, 21, 0],
    [3, 3, 77, 1708, 21, 0], [1, 10, 30, 1614, 28, 0], [1, 10, 44, 1614, 28, 1],
    [1, 10, 80, 1614, 28, 0], [2, 5, 85, 1614, 28, 1], [3, 5, 85, 1614, 28, 0],
    [1, 6, 94, 1460, 28, 0], [1, 10, 13, 964, 35, 1], [1, 10, 28, 964, 35, 1],
    [2, 4, 34, 964, 35, 1], [3, 4, 34, 964, 35, 1], [1, 13, 3, 900, 35, 0],
    [1, 10, 20, 900, 35, 0], [2, 8, 22, 900, 35, 0], [3, 1, 29, 900, 35, 1],
    [1, 10, 60, 599, 35, 1], [2, 11, 59, 599, 35, 0], [3, 8, 62, 599, 35, 1],
    [4, 8, 62, 599, 35, 1], [1, 10, 81, 599, 35, 0], [2, 7, 84, 404, 35, 0],
    [1, 10, 19, 258, 42, 0], [1, 10, 30, 258, 42, 0], [2, 9, 31, 258, 42, 1],
    [1, 10, 43, 258, 42, 0], [2, 6, 47, 258, 42, 1], [1, 10, 59, 258, 42, 1],
    [1, 10, 86, 258, 42, 0], [2, 8, 88, 5, 42, 0], [1, 10, 29, 845, 49, 0],
    [2, 3, 36, 845, 49, 0], [1, 10, 41, 845, 49, 1], [2, 2, 49, 845, 49, 0],
    [1, 10, 54, 845, 49, 0], [2, 2, 62, 845, 49, 0], [1, 20, 58, 845, 49, 1],
    [2, 24, 54, 845, 49, 1], [3, 26, 52, 845, 49, 1], [1, 10, 36, 426, 49, 1],
    [2, 4, 42, 426, 49, 0], [3, 6, 40, 426, 49, 0], [4, 1, 45, 301, 49, 1],
    [1, 10, 31, 157, 57, 0], [2, 6, 35, 157, 57, 0], [1, 10, 66, 157, 57, 0],
    [2, 5, 71, 157, 57, 0], [3, 2, 74, 0, 57, 0],
    # Michigan State (2024-25)
    [1, 10, 25, 3600, 0, 1], [2, 14, 21, 3568, 0, 1], [1, 10, 50, 3543, 0, 1],
    [2, 6, 54, 3512, 0, 1], [1, 10, 67, 3484, 0, 0], [2, 6, 71, 3448, 0, 1],
    [1, 10, 78, 3409, 0, 1], [2, 21, 79, 3345, 0, 1], [3, 16, 84, 3296, 0, 0],
    [1, 10, 20, 2714, 3, 1], [2, 3, 27, 2693, 3, 0], [3, 5, 25, 2647, 3, 1],
    [1, 10, 33, 2612, 3, 1], [2, 10, 33, 2611, 3, 0], [3, 4, 39, 2569, 3, 1],
    [1, 10, 58, 2535, 3, 1], [1, 10, 80, 2513, 3, 0], [2, 8, 82, 2471, 3, 0],
    [3, 5, 85, 2436, 3, 1], [1, 9, 91, 2700, 3, 0], [2, 3, 97, 2661, 3, 1],
    [3, 3, 97, 2649, 3, 1], [4, 3, 97, 2644, 3, 1], [1, 10, 19, 2480, 10, 0],
    [1, 10, 37, 2439, 10, 0], [2, 4, 43, 2402, 10, 1], [3, 4, 43, 2397, 10, 1],
    [1, 10, 25, 2381, 3, 1], [1, 20, 35, 2337, 3, 0], [1, 10, 72, 2297, 3, 0],
    [2, 1, 81, 2242, 3, 0], [1, 10, 16, 1983, 10, 0], [2, 6, 20, 1945, 10, 1],
    [3, 3, 23, 1920, 10, 0], [1, 10, 40, 1871, 10, 1], [2, 10, 40, 1868, 10, 1],
    [1, 10, 56, 1856, 10, 1], [1, 10, 83, 1841, 10, 1], [2, 10, 83, 1838, 10, 1],
    [3, 10, 83, 1829, 10, 1], [1, 10, 24, 1928, 17, 1], [2, 3, 31, 1894, 17, 0],
    [3, 1, 33, 1853, 17, 0], [1, 10, 36, 1814, 17, 0], [2, 9, 37, 1776, 17, 0],
    [3, 1, 45, 1752, 17, 0], [4, 1, 46, 1704, 17, 0], [1, 20, 36, 1631, 17, 0],
    [2, 14, 42, 1594, 17, 1], [1, 10, 62, 1557, 17, 1], [2, 10, 62, 1552, 17, 0],
    [3, 5, 67, 1508, 17, 1], [4, 5, 67, 1497, 17, 1], [1, 10, 88, 1042, 24, 1],
    [2, 8, 90, 1008, 24, 0], [3, 4, 94, 965, 24, 0], [1, 10, 27, 883, 31, 0],
    [2, 7, 30, 847, 31, 1], [3, 7, 30, 844, 31, 1], [1, 10, 44, 816, 31, 0],
    [2, 6, 48, 781, 31, 0], [3, 3, 51, 739, 31, 1], [1, 10, 26, 563, 31, 0],
    [2, 8, 28, 525, 31, 1], [3, 3, 33, 488, 31, 1], [1, 10, 45, 456, 31, 0],
    [2, 4, 51, 421, 31, 1], [1, 10, 57, 382, 31, 0], [2, 6, 61, 345, 31, 0],
    [3, 8, 59, 295, 31, 1], [1, 10, 43, 201, 31, 0], [2, 5, 48, 160, 31, 0],
    [3, 1, 52, 116, 31, 0], [4, 1, 52, 68, 31, 1],
    # Oregon (2024-25)
    [1, 10, 25, 3589, 0, 1], [2, 4, 31, 3558, 0, 1], [1, 10, 35, 3524, 0, 1],
    [2, 10, 35, 3518, 0, 0], [3, 7, 38, 3479, 0, 1], [4, 1, 44, 3442, 0, 0],
    [1, 10, 47, 3394, 0, 1], [1, 10, 79, 3378, 0, 0], [2, 7, 82, 3339, 0, 1],
    [1, 1, 99, 3300, 0, 0], [1, 10, 15, 3145, 7, 0], [1, 10, 28, 3109, 7, 1],
    [2, 10, 28, 3103, 7, 0], [3, 10, 28, 3094, 7, 0], [1, 10, 25, 3051, 1, 1],
    [2, 17, 18, 2862, 1, 0], [3, 16, 19, 2862, 1, 1], [1, 10, 26, 2734, 1, 0],
    [1, 10, 43, 2700, 1, 0], [1, 4, 96, 2691, 1, 0], [2, 1, 99, 2662, 1, 0],
    [1, 10, 25, 2403, -1, 0], [2, 9, 26, 2378, -1, 0], [3, 9, 26, 2334, -1, 1],
    [1, 10, 41, 2295, -1, 1], [2, 7, 44, 2262, -1, 0], [3, 1, 50, 2223, -1, 0],
    [4, 2, 49, 2188, -1, 0], [1, 10, 52, 2144, -1, 0], [2, 3, 59, 2107, -1, 0],
    [1, 10, 64, 2065, -1, 1], [1, 10, 85, 2038, -1, 1], [2, 10, 85, 2033, -1, 1],
    [1, 10, 25, 1863, -1, 1], [2, 4, 31, 1855, -1, 1], [3, 1, 34, 1847, -1, 0],
    [1, 10, 21, 1800, -1, 0], [1, 10, 21, 1648, -1, 0], [2, 7, 24, 1596, -1, 1],
    [1, 10, 62, 1586, -1, 0], [2, 7, 65, 1546, -1, 1], [1, 10, 90, 1508, -1, 1],
    [2, 6, 94, 1467, -1, 1], [1, 10, 2, 1111, 6, 0], [2, 7, 5, 1076, 6, 1],
    [1, 10, 20, 1035, 6, 0], [2, 6, 24, 989, 6, 0], [3, 3, 27, 919, 6, 0],
    [1, 10, 25, 794, -1, 0], [2, 10, 25, 750, -1, 0], [3, 4, 31, 715, -1, 1],
    [1, 10, 36, 687, -1, 1], [2, 10, 36, 682, -1, 0], [3, 7, 39, 632, -1, 1],
    [1, 15, 52, 579, -1, 1], [2, 7, 60, 541, -1, 1], [1, 10, 70, 501, -1, 1],
    [1, 15, 76, 444, -1, 0], [2, 14, 77, 396, -1, 1], [3, 13, 78, 365, -1, 1],
    [1, 10, 25, 96, -1, 1], [2, 19, 16, 71, -1, 1], [3, 6, 29, 60, -1, 1],
    [1, 10, 37, 51, -1, 1], [2, 1, 46, 34, -1, 1], [1, 10, 72, 28, -1, 1],
    [2, 25, 57, 10, -1, 1], [3, 20, 62, 6, -1, 0],
    # Nebraska (2024-25)
    [1, 10, 64, 3174, 0, 1], [2, 2, 72, 3174, 0, 1], [3, 10, 64, 3174, 0, 1],
    [4, 1, 73, 2454, 0, 0], [1, 10, 28, 2973, 0, 0], [2, 11, 27, 2973, 0, 0],
    [3, 9, 29, 2973, 0, 1], [1, 10, 9, 2611, 0, 0], [1, 10, 24, 2611, 0, 1],
    [1, 10, 43, 2611, 0, 0], [2, 4, 49, 2611, 0, 1], [1, 10, 60, 2009, 0, 1],
    [1, 10, 25, 2421, 4, 0], [2, 6, 29, 2421, 4, 0], [3, 1, 34, 2421, 4, 0],
    [1, 10, 40, 2201, 4, 1], [1, 10, 44, 2147, 11, 1], [2, 1, 53, 2147, 11, 0],
    [1, 10, 57, 2147, 11, 1], [1, 10, 74, 2147, 11, 0], [2, 6, 78, 2147, 11, 0],
    [3, 6, 78, 2147, 11, 1], [1, 10, 19, 1794, 8, 0], [2, 8, 21, 1794, 8, 1],
    [3, 3, 26, 1794, 8, 1], [1, 10, 21, 1331, 5, 1], [1, 10, 1, 1195, 5, 0],
    [2, 8, 3, 1195, 5, 0], [3, 2, 9, 1195, 5, 1], [1, 10, 20, 1005, 5, 0],
    [2, 2, 28, 1005, 5, 0], [3, 1, 29, 900, 5, 0], [1, 10, 25, 647, -3, 1],
    [1, 10, 62, 647, -3, 0], [2, 7, 65, 647, -3, 0], [3, 5, 67, 647, -3, 0],
    [4, 1, 71, 647, -3, 1], [1, 10, 74, 647, -3, 0], [2, 3, 81, 647, -3, 0],
    [1, 9, 91, 364, -3, 1], [1, 10, 37, 275, 4, 0], [2, 9, 38, 275, 4, 0],
    [3, 9, 38, 228, 4, 0], [1, 10, 45, 76, 4, 0], [2, 12, 43, 76, 4, 0],
    [3, 13, 42, 0, 4, 0],
    # Purdue (2024-25)
    [1, 10, 6, 3137, 0, 0], [2, 8, 8, 3137, 0, 1], [1, 10, 33, 3137, 0, 0],
    [2, 10, 33, 3137, 0, 1], [3, 3, 40, 3137, 0, 1], [1, 8, 92, 2881, 0, 0],
    [2, 6, 94, 2881, 0, 0], [3, 2, 98, 2881, 0, 0], [4, 1, 99, 2762, 0, 0],
    [1, 10, 20, 2712, 7, 1], [2, 10, 20, 2700, 7, 0], [1, 10, 32, 2700, 7, 1],
    [2, 4, 38, 2700, 7, 1], [1, 10, 47, 2700, 7, 0], [2, 18, 39, 2700, 7, 1],
    [3, 17, 40, 2700, 7, 1], [4, 1, 56, 2700, 7, 0], [1, 10, 57, 2700, 7, 1],
    [2, 5, 62, 2700, 7, 0], [1, 10, 68, 2700, 7, 0], [2, 5, 73, 2700, 7, 0],
    [1, 10, 85, 2210, 7, 1], [1, 10, 41, 940, 14, 0], [1, 10, 57, 940, 14, 1],
    [2, 10, 57, 940, 14, 1], [3, 1, 66, 940, 14, 0], [1, 10, 81, 940, 14, 1],
    [2, 19, 72, 940, 14, 1], [3, 8, 83, 927, 14, 1], [1, 10, 18, 1795, 21, 1],
    [1, 10, 37, 1795, 21, 0], [2, 7, 40, 1795, 21, 1], [3, 2, 45, 1795, 21, 0],
    [1, 10, 47, 1795, 21, 1], [2, 10, 47, 1795, 21, 1], [1, 10, 61, 1795, 21, 1],
    [2, 4, 67, 1795, 21, 0], [3, 3, 68, 1795, 21, 1], [1, 10, 80, 1795, 21, 1],
    [2, 10, 80, 1795, 21, 1], [3, 3, 87, 1795, 21, 0], [1, 10, 24, 1243, 24, 0],
    [2, 2, 32, 1243, 24, 0], [1, 10, 35, 1243, 24, 1], [1, 10, 52, 1243, 24, 0],
    [1, 10, 81, 1087, 24, 0], [1, 10, 26, 723, 38, 0], [2, 5, 31, 723, 38, 0],
    [1, 10, 39, 723, 38, 0], [2, 8, 41, 900, 38, 1], [1, 10, 58, 900, 38, 1],
    [1, 10, 90, 845, 38, 1], [1, 10, 21, 590, 45, 0], [1, 10, 31, 590, 45, 0],
    [2, 4, 37, 590, 45, 0], [3, 3, 38, 590, 45, 1], [1, 10, 48, 361, 45, 0],
    [2, 8, 50, 361, 45, 0], [3, 12, 46, 361, 45, 0], [1, 10, 65, 361, 45, 1],
    [2, 10, 65, 361, 45, 1], [3, 10, 65, 361, 45, 1], [4, 10, 65, 223, 45, 1],
    [1, 10, 37, 111, 45, 0], [2, 7, 40, 111, 45, 0], [3, 3, 44, 0, 45, 0],
    # Northwestern (2024-25)
    [1, 10, 33, 2883, 0, 1], [2, 2, 41, 2853, 0, 0], [3, 2, 41, 2819, 0, 0],
    [1, 10, 49, 2783, 0, 1], [2, 10, 49, 2779, 0, 0], [3, 6, 53, 2743, 0, 1],
    [4, 1, 58, 2703, 0, 0], [1, 10, 62, 2665, 0, 1], [2, 15, 57, 2631, 0, 1],
    [3, 9, 63, 2601, 0, 1], [1, 10, 15, 2547, -7, 0], [2, 11, 14, 2508, -7, 0],
    [3, 8, 17, 2474, -7, 1], [1, 10, 37, 2437, -7, 0], [1, 10, 48, 2407, -7, 1],
    [2, 10, 48, 2404, -7, 0], [3, 3, 55, 2369, -7, 1], [4, 3, 55, 2363, -7, 1],
    [1, 10, 69, 2322, -7, 0], [2, 6, 73, 2284, -7, 1], [1, 10, 85, 2258, -7, 1],
    [1, 1, 99, 2219, -7, 0], [1, 1, 99, 2112, 0, 0], [2, 1, 99, 2059, 0, 0],
    [1, 10, 23, 2010, 7, 0], [2, 6, 27, 1989, 7, 1], [1, 10, 61, 1980, 7, 1],
    [2, 10, 61, 1970, 7, 0], [1, 10, 73, 1948, 7, 0], [2, 8, 75, 1847, 7, 1],
    [1, 10, 10, 1800, 14, 0], [2, 7, 13, 1761, 14, 0], [3, 5, 15, 1728, 14, 1],
    [1, 10, 83, 1676, 14, 1], [2, 1, 92, 1631, 14, 1], [1, 10, 21, 1187, 21, 0],
    [2, 7, 24, 1157, 21, 0], [1, 10, 43, 1124, 21, 1], [1, 10, 55, 1084, 21, 0],
    [1, 10, 72, 1052, 21, 0], [1, 10, 86, 1032, 21, 0], [2, 8, 88, 997, 21, 0],
    [3, 6, 90, 953, 21, 1], [1, 10, 22, 844, 24, 0], [2, 5, 27, 814, 24, 0],
    [1, 10, 34, 776, 24, 0], [2, 3, 41, 723, 24, 0], [3, 2, 42, 690, 24, 1],
    [1, 10, 36, 554, 24, 1], [2, 5, 41, 511, 24, 0], [1, 10, 56, 474, 24, 1],
    [2, 3, 63, 437, 24, 0], [3, 2, 64, 395, 24, 1], [4, 2, 64, 394, 24, 1],
    [1, 10, 16, 112, 24, 0], [2, 9, 17, 69, 24, 0], [3, 3, 23, 30, 24, 0],
    # Indiana (2024-25)
    [1, 10, 25, 3592, 0, 0], [2, 7, 28, 3564, 0, 1], [3, 5, 30, 3531, 0, 1],
    [1, 10, 25, 3171, -7, 1], [2, 11, 24, 3137, -7, 1], [3, 2, 33, 3097, -7, 1],
    [1, 10, 38, 3062, -7, 0], [2, 5, 43, 3025, -7, 0], [1, 10, 48, 2982, -7, 0],
    [2, 3, 55, 2945, -7, 1], [1, 20, 55, 2821, -7, 1], [2, 25, 40, 2800, -7, 1],
    [3, 35, 40, 2780, -7, 1], [4, 10, 65, 2737, -7, 1], [1, 10, 89, 2737, -7, 0],
    [2, 8, 91, 2700, -7, 0], [3, 3, 96, 2658, -7, 0], [4, 1, 98, 2615, -7, 0],
    [1, 10, 56, 2382, -7, 1], [2, 2, 64, 2361, -7, 1], [1, 10, 68, 2324, -7, 1],
    [1, 10, 80, 2291, -7, 1], [2, 1, 89, 2242, -7, 1], [1, 10, 82, 2183, 0, 1],
    [2, 10, 82, 2177, 0, 0], [3, 14, 78, 2122, 0, 1], [1, 7, 93, 1001, 7, 0],
    [2, 4, 96, 964, 7, 0], [3, 4, 96, 921, 7, 0], [1, 10, 25, 1607, 14, 1],
    [1, 10, 50, 1581, 14, 0], [2, 7, 53, 1545, 14, 0], [3, 7, 53, 1503, 14, 1],
    [1, 10, 66, 1465, 14, 0], [2, 5, 71, 1426, 14, 0], [1, 10, 79, 1381, 14, 0],
    [1, 9, 91, 1327, 14, 0], [2, 4, 96, 1303, 14, 0], [3, 1, 99, 1262, 14, 1],
    [1, 10, 9, 1114, 21, 0], [2, 7, 12, 1067, 21, 0], [3, 5, 14, 1033, 21, 1],
    [1, 10, 30, 887, 21, 1], [2, 7, 33, 846, 21, 0], [1, 10, 41, 818, 21, 0],
    [2, 10, 41, 764, 21, 0], [3, 7, 44, 722, 21, 1], [4, 1, 50, 678, 21, 1],
    [1, 10, 75, 639, 21, 1], [2, 22, 63, 605, 21, 0], [3, 21, 64, 554, 21, 1],
    [1, 10, 60, 112, 16, 0], [1, 1, 99, 70, 16, 0], [2, 1, 99, 35, 16, 0],
    # Michigan (2024-25)
    [1, 10, 31, 3033, 0, 1], [2, 1, 40, 3033, 0, 1], [1, 10, 48, 3033, 0, 0],
    [2, 10, 48, 3033, 0, 1], [3, 2, 56, 3033, 0, 1], [1, 10, 84, 3033, 0, 0],
    [2, 10, 84, 3033, 0, 0], [3, 5, 89, 3033, 0, 1], [1, 10, 3, 2684, 3, 0],
    [2, 10, 3, 2684, 3, 0], [3, 9, 4, 2601, 3, 1], [1, 10, 25, 2557, -4, 0],
    [1, 10, 40, 2557, -4, 1], [2, 5, 63, 2557, -4, 0], [3, 3, 65, 2557, -4, 0],
    [4, 1, 67, 2557, -4, 0], [1, 10, 77, 2364, -4, 0], [2, 6, 81, 2364, -4, 0],
    [3, 7, 80, 2364, -4, 1], [1, 10, 7, 2141, -4, 0], [2, 8, 9, 2141, -4, 1],
    [3, 8, 9, 2141, -4, 0], [1, 10, 25, 1935, -7, 1], [2, 10, 25, 1935, -7, 1],
    [3, 4, 31, 1920, -7, 1], [1, 10, 49, 1920, -7, 1], [2, 10, 49, 1920, -7, 1],
    [3, 1, 58, 1920, -7, 1], [1, 10, 62, 1920, -7, 1], [1, 10, 73, 1920, -7, 0],
    [1, 10, 90, 1830, -7, 1], [1, 10, 6, 1800, 0, 0], [2, 9, 7, 1800, 0, 0],
    [3, 6, 10, 1800, 0, 1], [1, 10, 19, 1800, 0, 1], [1, 10, 32, 1800, 0, 0],
    [2, 7, 35, 1800, 0, 1], [3, 7, 35, 1800, 0, 1], [1, 10, 59, 1800, 0, 1],
    [2, 10, 59, 1800, 0, 1], [3, 7, 62, 1800, 0, 1], [1, 10, 53, 1404, 0, 0],
    [1, 10, 70, 1404, 0, 0], [2, 7, 73, 1404, 0, 0], [3, 5, 75, 1404, 0, 1],
    [1, 10, 81, 1404, 0, 0], [2, 5, 86, 1404, 0, 0], [3, 7, 84, 1191, 0, 1],
    [1, 10, 84, 1141, 0, 0], [2, 10, 84, 1141, 0, 1], [3, 10, 84, 1141, 0, 0],
    [1, 10, 12, 468, 0, 0], [2, 5, 17, 468, 0, 1], [3, 5, 17, 468, 0, 0],
    [1, 10, 25, 45, -3, 1], [2, 10, 25, 45, -3, 1], [3, 9, 26, 31, -3, 1],
    [4, 9, 26, 23, -3, 1],
    # Oregon B1G (2024-25)
    [1, 10, 25, 3591, 0, 1], [1, 10, 55, 3551, 0, 1], [2, 10, 55, 3540, 0, 1],
    [1, 10, 22, 3113, 7, 1], [1, 10, 51, 3088, 7, 0], [2, 9, 52, 3054, 7, 1],
    [1, 10, 64, 3019, 7, 1], [2, 10, 64, 3007, 7, 0], [3, 10, 64, 2975, 7, 1],
    [1, 10, 47, 2906, 14, 1], [2, 3, 54, 2889, 14, 0], [1, 10, 58, 2851, 14, 1],
    [1, 10, 9, 2618, 14, 0], [2, 5, 14, 2581, 14, 0], [3, 4, 15, 2542, 14, 1],
    [1, 10, 47, 2524, 14, 0], [2, 5, 52, 2496, 14, 1], [3, 5, 52, 2486, 14, 1],
    [1, 10, 67, 2448, 14, 0], [2, 10, 67, 2407, 14, 0], [3, 5, 72, 2396, 14, 1],
    [1, 10, 52, 2461, 17, 0], [2, 5, 57, 2428, 17, 1], [1, 10, 34, 2327, 24, 0],
    [1, 10, 39, 2262, 31, 0], [1, 10, 54, 2224, 31, 0], [2, 6, 58, 2182, 31, 1],
    [3, 2, 62, 2124, 31, 0], [1, 10, 65, 2098, 31, 0], [2, 5, 70, 2060, 31, 1],
    [1, 10, 80, 2026, 31, 1], [2, 10, 80, 2019, 31, 0], [3, 8, 82, 1984, 31, 1],
    [1, 10, 25, 1435, 19, 0], [2, 7, 28, 1386, 19, 1], [3, 3, 32, 1348, 19, 1],
    [1, 10, 44, 1221, 19, 1], [2, 9, 45, 1187, 19, 1], [3, 8, 46, 1152, 19, 1],
    [1, 10, 56, 1105, 19, 1], [1, 10, 72, 1073, 19, 0], [1, 8, 92, 1039, 19, 0],
    [1, 16, 9, 908, 26, 0], [2, 15, 10, 893, 26, 0], [3, 11, 14, 847, 26, 0],
    [1, 10, 15, 592, 20, 0], [1, 10, 33, 547, 20, 0], [2, 9, 34, 495, 20, 1],
    [1, 10, 52, 438, 20, 0], [2, 11, 51, 413, 20, 0], [3, 9, 53, 375, 20, 1],
    [1, 10, 37, 238, 20, 0], [2, 3, 44, 193, 20, 0], [1, 10, 49, 146, 20, 0],
    [2, 14, 45, 114, 20, 0], [3, 16, 43, 69, 20, 0],
    # Texas (2024-25)
    [1, 10, 36, 3097, 0, 0], [2, 5, 41, 3078, 0, 0], [3, 3, 43, 3035, 0, 1],
    [1, 10, 48, 3003, 0, 1], [1, 10, 62, 2965, 0, 1], [2, 10, 62, 2961, 0, 0],
    [3, 6, 66, 2923, 0, 1], [1, 10, 77, 2885, 0, 1], [1, 9, 91, 2849, 0, 1],
    [2, 9, 91, 2844, 0, 0], [1, 10, 8, 2652, 7, 1], [2, 7, 11, 2616, 7, 1],
    [1, 10, 24, 2580, 7, 0], [2, 8, 26, 2535, 7, 0], [1, 10, 48, 2496, 7, 1],
    [1, 10, 62, 2454, 7, 0], [2, 24, 48, 2440, 7, 0], [3, 26, 46, 2400, 7, 1],
    [1, 10, 34, 2543, 7, 1], [2, 3, 41, 2513, 7, 1], [1, 10, 46, 2475, 7, 1],
    [2, 20, 36, 2446, 7, 1], [3, 8, 48, 2404, 7, 1], [1, 10, 35, 2283, 7, 0],
    [2, 20, 25, 2224, 7, 1], [3, 18, 27, 2160, 7, 1], [1, 10, 27, 1996, 7, 0],
    [2, 10, 27, 1961, 7, 1], [3, 10, 27, 1956, 7, 1], [1, 10, 25, 1829, 7, 1],
    [1, 10, 25, 1800, 7, 1], [1, 10, 38, 1758, 7, 0], [2, 3, 45, 1722, 7, 0],
    [1, 10, 52, 1684, 7, 1], [1, 10, 12, 1531, 7, 0], [2, 10, 12, 1505, 7, 1],
    [3, 1, 21, 1456, 7, 0], [1, 10, 25, 1085, 0, 1], [2, 20, 15, 1064, 0, 0],
    [3, 15, 20, 1016, 0, 1], [1, 10, 27, 876, 0, 1], [2, 12, 25, 838, 0, 1],
    [3, 8, 29, 791, 0, 1], [1, 10, 47, 746, 0, 1], [2, 10, 47, 739, 0, 1],
    [1, 10, 58, 698, 0, 1], [2, 10, 58, 692, 0, 1], [3, 4, 64, 657, 0, 1],
    [4, 2, 66, 585, 0, 0], [1, 10, 84, 543, 0, 1], [2, 2, 92, 508, 0, 0],
    [1, 2, 98, 460, 0, 0], [2, 1, 99, 422, 0, 0], [1, 10, 59, 98, 14, 0],
    [2, 1, 68, 58, 14, 0], [1, 10, 69, 15, 14, 0],
    # Notre Dame (2024-25)
    [1, 10, 25, 3011, -7, 0], [2, 5, 30, 2974, -7, 0], [3, 5, 30, 2935, -7, 1],
    [1, 10, 37, 2889, -7, 1], [2, 6, 41, 2853, -7, 0], [1, 10, 60, 2821, -7, 1],
    [1, 10, 75, 2800, -7, 0], [2, 15, 70, 2740, -7, 1], [3, 3, 82, 2706, -7, 0],
    [1, 10, 87, 2695, -7, 0], [2, 5, 92, 2650, -7, 1], [1, 10, 24, 2535, 0, 0],
    [1, 10, 37, 2501, 0, 1], [1, 10, 52, 2463, 0, 0], [2, 8, 54, 2421, 0, 1],
    [3, 5, 57, 2380, 0, 0], [1, 10, 68, 2336, 0, 1], [1, 10, 80, 2296, 0, 0],
    [2, 8, 82, 2256, 0, 1], [3, 2, 88, 2219, 0, 0], [1, 9, 91, 2175, 0, 0],
    [1, 10, 20, 2088, 7, 1], [2, 8, 22, 2049, 7, 0], [3, 7, 23, 2005, 7, 1],
    [1, 10, 42, 1955, 7, 1], [2, 11, 41, 1922, 7, 0], [3, 7, 45, 1915, 7, 1],
    [1, 10, 65, 1887, 7, 1], [2, 13, 62, 1879, 7, 1], [1, 10, 77, 1872, 7, 1],
    [2, 10, 77, 1866, 7, 0], [1, 10, 88, 1855, 7, 0], [2, 4, 94, 1827, 7, 1],
    [1, 10, 25, 1800, 14, 1], [2, 10, 25, 1785, 14, 0], [1, 5, 95, 1743, 14, 0],
    [2, 4, 96, 1699, 14, 0], [3, 1, 99, 1666, 14, 0], [1, 10, 67, 1575, 21, 0],
    [2, 6, 71, 1536, 21, 0], [1, 10, 78, 1491, 21, 0], [2, 17, 71, 1421, 21, 0],
    [3, 16, 72, 1378, 21, 1], [1, 10, 25, 1080, 16, 1], [2, 3, 32, 1045, 16, 0],
    [3, 1, 34, 1014, 16, 0], [1, 10, 36, 969, 16, 0], [1, 10, 53, 927, 16, 0],
    [2, 8, 55, 886, 16, 1], [1, 10, 20, 564, 16, 0], [2, 9, 21, 523, 16, 0],
    [1, 10, 32, 482, 16, 0], [2, 7, 35, 435, 16, 0], [3, 3, 39, 394, 16, 1],
    [1, 10, 24, 247, 8, 0], [2, 7, 27, 206, 8, 0], [1, 10, 35, 170, 8, 0],
    [2, 10, 35, 166, 8, 0], [3, 11, 34, 158, 8, 1], [1, 15, 85, 117, 8, 0],
    [2, 14, 86, 113, 8, 0], [3, 13, 87, 68, 8, 0],
    # 2023 Season Data
    # Indiana (2023 - Week 1)
    [1, 10, 20, 3170, 0, 0], [2, 12, 18, 3170, 0, 1], [3, 3, 27, 3170, 0, 0], [1, 10, 46, 3170, 0, 0], [2, 7, 49, 3170, 0, 1], [1, 10, 58, 3170, 0, 1], [2, 10, 58, 3170, 0, 0], [3, 2, 66, 3170, 0, 0], [4, 2, 66, 3170, 0, 1], [1, 10, 76, 3170, 0, 0], [1, 7, 93, 2836, 0, 0],
    [1, 10, 38, 2724, 7, 0], [2, 10, 38, 2724, 7, 1], [3, 10, 38, 2724, 7, 1],
    [1, 10, 21, 2440, 7, 1], [2, 1, 30, 2400, 7, 0], [1, 10, 34, 2700, 7, 1], [2, 1, 43, 2700, 7, 1], [1, 20, 40, 2700, 7, 1], [2, 10, 50, 2700, 7, 0], [1, 10, 63, 2700, 7, 1], [2, 5, 68, 2700, 7, 0], [3, 2, 71, 2700, 7, 0], [4, 2, 71, 2418, 7, 1],
    [1, 10, 26, 2169, 4, 0], [2, 7, 29, 2169, 4, 0], [3, 1, 35, 2169, 4, 0],
    [1, 10, 54, 1838, 4, 1], [1, 10, 78, 1838, 4, 1], [2, 10, 78, 1838, 4, 1], [3, 10, 78, 1838, 4, 1], [4, 10, 78, 1803, 4, 1],
    [1, 10, 25, 1800, 7, 0], [2, 1, 34, 1800, 7, 0], [3, 3, 32, 1800, 7, 1],
    [1, 10, 20, 1626, 10, 1], [2, 5, 25, 1626, 10, 1], [1, 10, 32, 1626, 10, 0], [2, 9, 33, 1626, 10, 1], [1, 10, 52, 1626, 10, 1], [1, 10, 79, 1626, 10, 0], [2, 8, 81, 1626, 10, 1], [1, 10, 90, 1626, 10, 1], [2, 10, 90, 1626, 10, 0], [3, 4, 96, 1626, 10, 0], [4, 4, 96, 1302, 10, 1],
    [1, 10, 12, 1155, 10, 0], [1, 10, 26, 1155, 10, 0], [2, 9, 27, 1155, 10, 1], [1, 10, 76, 1105, 10, 1], [2, 10, 76, 1105, 10, 0], [1, 10, 88, 1105, 10, 0], [2, 1, 97, 1071, 10, 0],
    [1, 10, 58, 607, 17, 1], [2, 10, 58, 607, 17, 0], [3, 8, 60, 607, 17, 1], [1, 10, 71, 607, 17, 1], [2, 5, 76, 607, 17, 0], [3, 5, 87, 384, 17, 0], [4, 9, 83, 384, 17, 1], [1, 5, 95, 384, 17, 0], [2, 4, 96, 384, 17, 1], [3, 4, 96, 384, 17, 1], [4, 4, 96, 266, 17, 1],
    [1, 10, 34, 104, 20, 1], [2, 10, 34, 104, 20, 1], [3, 12, 32, 104, 20, 1],
    # Youngstown (2023 - Week 2)
    [1, 10, 24, 3594, 0, 0], [2, 11, 23, 3594, 0, 1], [3, 5, 29, 3214, 0, 1],
    [1, 10, 32, 2854, 0, 1], [2, 6, 36, 2854, 0, 1], [3, 11, 31, 2854, 0, 1],
    [1, 10, 22, 1962, 7, 0], [2, 3, 29, 1962, 7, 1], [1, 10, 37, 1962, 7, 1], [1, 10, 61, 1962, 7, 1],
    [1, 10, 40, 1738, 7, 0], [2, 2, 48, 1738, 7, 1], [1, 10, 60, 1738, 7, 1], [2, 10, 60, 1738, 7, 0], [3, 7, 63, 1738, 7, 1], [4, 7, 63, 1738, 7, 1], [1, 10, 72, 1738, 7, 0], [2, 8, 74, 1738, 7, 0], [3, 3, 79, 1738, 7, 0], [2, 25, 68, 1738, 7, 1], [3, 25, 68, 1738, 7, 0], [1, 10, 87, 1447, 7, 0],
    [1, 10, 10, 1363, 14, 0], [2, 9, 11, 1363, 14, 1], [3, 9, 11, 1363, 14, 1],
    [1, 10, 47, 1363, 14, 0], [2, 11, 63, 1363, 14, 1], [3, 3, 71, 1363, 14, 0], [4, 2, 72, 1086, 14, 1],
    [1, 10, 37, 1016, 21, 1], [1, 10, 50, 1016, 21, 1], [2, 10, 50, 1016, 21, 1], [3, 10, 50, 1016, 21, 0],
    [1, 10, 30, 1138, 18, 0], [2, 5, 35, 1138, 18, 1], [3, 5, 35, 1138, 18, 1],
    [1, 10, 48, 1138, 18, 0], [2, 11, 62, 1138, 18, 1], [3, 10, 71, 1138, 18, 1],
    [1, 10, 23, 750, 35, 1], [1, 10, 80, 750, 35, 0], [2, 8, 82, 750, 35, 1],
    [3, 8, 82, 750, 35, 1],
    [1, 10, 8, 491, 35, 0], [2, 9, 9, 491, 35, 0], [1, 10, 27, 491, 35, 0],
    [2, 14, 23, 491, 35, 1], [3, 6, 31, 491, 35, 1],
    [1, 10, 9, 752, 28, 0], [2, 6, 13, 752, 28, 0], [2, 7, 23, 752, 28, 0],
    [3, 4, 26, 752, 28, 1], [1, 10, 53, 752, 28, 1], [1, 10, 69, 752, 28, 0],
    [2, 9, 70, 752, 28, 1], [1, 10, 83, 752, 28, 0], [2, 1, 92, 752, 28, 0],
    [1, 14, 86, 752, 28, 0], [2, 5, 95, 752, 28, 1], [3, 5, 95, 752, 28, 1],
    [1, 10, 37, 558, 28, 0], [2, 2, 45, 558, 28, 0], [1, 10, 50, 558, 28, 0],
    [2, 9, 51, 558, 28, 0], [3, 6, 54, 414, 28, 1],
    [1, 10, 49, 180, 28, 0], [2, 6, 53, 180, 28, 0], [3, 3, 56, 180, 28, 0],
    # Western Kentucky (2023 - Week 3)
    [1, 10, 25, 3592, 0, 1], [1, 10, 41, 3592, 0, 0], [2, 5, 46, 3592, 0, 1], [1, 10, 67, 3592, 0, 0], [2, 4, 73, 3592, 0, 1], [3, 5, 72, 3592, 0, 1], [4, 5, 72, 3592, 0, 1], [1, 10, 79, 3112, 0, 0],
    [1, 10, 48, 2857, 7, 1], [2, 1, 57, 2857, 7, 0], [3, 1, 57, 2857, 7, 0], [1, 10, 59, 2739, 7, 1],
    [1, 10, 18, 1860, 4, 0], [2, 5, 23, 1860, 4, 1], [1, 10, 33, 1800, 4, 0], [2, 6, 37, 1800, 4, 0], [3, 2, 41, 1800, 4, 1], [1, 13, 65, 1800, 4, 0], [2, 10, 68, 1800, 4, 1], [3, 10, 68, 1800, 4, 1], [1, 10, 86, 1800, 4, 0], [2, 7, 89, 1800, 4, 0], [3, 3, 93, 1553, 4, 0],
    [1, 10, 25, 1490, 4, 1],
    [1, 10, 60, 1153, 11, 0],
    [1, 10, 52, 1095, 18, 0], [2, 4, 58, 1095, 18, 1], [1, 10, 78, 1095, 18, 0], [2, 3, 85, 955, 18, 1],
    [1, 10, 42, 1008, 25, 0], [2, 6, 46, 1008, 25, 1], [1, 10, 58, 1008, 25, 0],
    [2, 10, 58, 1008, 25, 1], [3, 10, 58, 1008, 25, 1], [1, 10, 10, 750, 25, 0],
    [2, 7, 13, 750, 25, 1], [1, 10, 20, 750, 25, 1], [2, 15, 15, 750, 25, 1],
    [3, 7, 23, 750, 25, 1],
    [1, 10, 12, 475, 25, 0], [1, 15, 26, 475, 25, 1], [1, 10, 54, 475, 25, 1],
    [2, 7, 57, 475, 25, 1], [3, 6, 58, 475, 25, 1],
    [1, 10, 45, 60, 39, 0], [2, 5, 50, 60, 39, 1], [3, 5, 50, 900, 39, 0], [4, 1, 54, 900, 39, 0], [1, 10, 57, 900, 39, 1], [1, 10, 69, 900, 39, 0], [2, 7, 72, 757, 39, 1],
    [1, 10, 36, 192, 53, 0], [2, 1, 45, 192, 53, 0], [1, 10, 49, 192, 53, 0], [2, 7, 52, 192, 53, 0], [3, 1, 58, 192, 53, 0],
    [1, 10, 36, 192, 53, 0],
    # Notre Dame (2023 - Week 4)
    [1, 10, 25, 3600, 0, 1], [2, 13, 22, 3600, 0, 0], [3, 6, 29, 3600, 0, 1], [1, 10, 43, 3600, 0, 0], [2, 6, 47, 3600, 0, 1], [1, 10, 55, 3600, 0, 1], [2, 15, 50, 3600, 0, 0], [3, 12, 53, 3600, 0, 1],
    [1, 10, 18, 2591, 0, 0], [2, 6, 22, 2591, 0, 0], [3, 4, 24, 2591, 0, 0],
    [1, 10, 29, 2164, 0, 0], [2, 1, 38, 2164, 0, 0], [1, 10, 44, 2164, 0, 0], [1, 10, 64, 2164, 0, 1], [2, 10, 64, 2164, 0, 0], [3, 8, 66, 2164, 0, 1], [1, 10, 78, 2164, 0, 0], [2, 6, 82, 2164, 0, 0], [3, 5, 83, 2164, 0, 1], [1, 7, 93, 2164, 0, 0], [2, 4, 96, 2164, 0, 0], [3, 1, 99, 2164, 0, 0], [4, 1, 99, 2113, 0, 1],
    [1, 10, 21, 1126, 0, 1], [2, 3, 28, 1126, 0, 0], [3, 2, 29, 1126, 0, 1], [1, 10, 35, 1126, 0, 0], [1, 10, 52, 1126, 0, 0], [2, 7, 55, 977, 0, 1], [3, 7, 55, 977, 0, 1], [1, 10, 67, 977, 0, 1], [1, 10, 85, 977, 0, 1], [2, 10, 85, 940, 0, 0], [3, 8, 87, 940, 0, 1],
    [1, 10, 20, 1, 3, 0],
    [1, 10, 25, 1800, 3, 0], [2, 1, 34, 1800, 3, 0], [3, 3, 32, 1800, 3, 1],
    [1, 10, 39, 1574, 10, 0],
    [1, 10, 35, 1095, 3, 1], [2, 4, 41, 1095, 3, 0], [3, 4, 41, 1095, 3, 1], [1, 10, 45, 1095, 3, 1], [1, 10, 60, 1095, 3, 1], [2, 10, 60, 1095, 3, 0], [3, 24, 46, 1095, 3, 1],
    [1, 10, 28, 854, 3, 1], [2, 5, 33, 854, 3, 1], [3, 3, 35, 854, 3, 1], [1, 10, 44, 854, 3, 0], [2, 7, 47, 854, 3, 1], [1, 10, 57, 854, 3, 0], [1, 10, 66, 854, 3, 1], [2, 8, 68, 854, 3, 1], [1, 10, 79, 854, 3, 1], [2, 10, 79, 854, 3, 1], [3, 4, 85, 854, 3, 0],
    [1, 10, 57, 437, -4, 0], [2, 13, 69, 437, -4, 1], [1, 10, 65, 437, -4, 1], [2, 10, 65, 437, -4, 0], [3, 11, 82, 437, -4, 1],
    [1, 10, 20, 564, -1, 0], [2, 9, 21, 564, -1, 0], [1, 10, 32, 564, -1, 0], [2, 7, 35, 564, -1, 0], [3, 3, 39, 564, -1, 1],
    [1, 10, 35, 746, -11, 1], [2, 10, 35, 746, -11, 1], [3, 10, 35, 746, -11, 1], [1, 10, 58, 746, -11, 1], [2, 10, 58, 746, -11, 1], [3, 7, 61, 746, -11, 1], [4, 7, 61, 746, -11, 1], [1, 10, 68, 746, -11, 1], [2, 10, 68, 746, -11, 1], [1, 10, 87, 746, -11, 1], [2, 10, 87, 15, -11, 1], [3, 19, 78, 15, -11, 1], [1, 1, 99, 7, -11, 1], [2, 1, 99, 7, -11, 1], [3, 1, 99, 1, -11, 0],
    [1, 10, 47, 1, -4, 0],
    # Maryland
    [1, 10, 25, 3600, 0, 1], [2, 10, 25, 3600, 0, 0], [3, 2, 33, 3600, 0, 1], [4, 2, 33, 3549, 0, 0],
    [1, 10, 25, 3161, -7, 0], [2, 5, 30, 3161, -7, 1], [1, 10, 43, 3161, -7, 0], [2, 9, 44, 3161, -7, 0], [3, 2, 51, 3161, -7, 0], [1, 10, 55, 3161, -7, 1], [2, 10, 55, 3161, -7, 1], [3, 10, 55, 3161, -7, 1],
    [1, 10, 29, 1793, -7, 0], [2, 16, 23, 1793, -7, 1], [3, 16, 23, 1793, -7, 1],
    [1, 10, 25, 1676, -10, 1], [1, 10, 38, 1676, -10, 0], [2, 14, 34, 1676, -10, 1], [3, 10, 38, 1676, -10, 1],
    [1, 10, 13, 1396, -3, 0], [2, 7, 16, 1396, -3, 1], [1, 10, 28, 1396, -3, 0], [2, 7, 31, 1396, -3, 1], [3, 7, 31, 1396, -3, 1],
    [1, 10, 10, 1155, -3, 1], [1, 10, 68, 1155, -3, 1], [1, 10, 87, 1155, -3, 0], [2, 4, 93, 1155, -3, 0], [3, 5, 92, 940, -3, 1],
    [1, 10, 24, 1800, 0, 1], [1, 10, 40, 1800, 0, 0], [2, 11, 61, 1800, 0, 1],
    [1, 10, 38, 1268, 3, 0], [2, 4, 32, 1268, 3, 0], [3, 4, 32, 1268, 3, 0], [4, 1, 29, 1268, 3, 0], [1, 10, 28, 1268, 3, 1], [1, 6, 94, 1268, 3, 1], [2, 6, 94, 1081, 3, 0], [3, 5, 95, 1081, 3, 1],
    [1, 10, 25, 893, 7, 0], [2, 8, 27, 893, 7, 1], [1, 10, 35, 893, 7, 1], [1, 10, 47, 893, 7, 0], [2, 8, 49, 893, 7, 1], [2, 33, 34, 893, 7, 1], [1, 10, 56, 893, 7, 1],
    [1, 10, 17, 481, 10, 0], [2, 9, 16, 472, 10, 0], [3, 10, 17, 421, 10, 1],
    [1, 10, 50, 332, 17, 0], [2, 7, 53, 332, 17, 0], [3, 4, 56, 277, 17, 1], [1, 10, 64, 277, 17, 0], [2, 9, 66, 277, 17, 0], [3, 8, 67, 277, 17, 1],
    [1, 10, 35, 54, 20, 0], [2, 6, 39, 54, 20, 0],
    # Purdue (2023 - Week 6)
    [1, 10, 31, 3114, 0, 1], [2, 10, 31, 3114, 0, 1], [3, 10, 31, 3114, 0, 1], [1, 10, 46, 3114, 0, 0], [2, 8, 48, 3114, 0, 1], [1, 10, 82, 3114, 0, 0], [2, 6, 86, 2957, 0, 1], [3, 6, 86, 2951, 0, 1],
    [1, 10, 49, 2870, 6, 0], [2, 5, 54, 2870, 6, 0], [1, 10, 64, 2870, 6, 1], [1, 10, 78, 2870, 6, 0], [2, 4, 84, 2870, 6, 0], [3, 1, 87, 2870, 6, 0], [1, 5, 95, 2870, 6, 0], [2, 2, 98, 2624, 6, 0],
    [1, 10, 28, 2557, 13, 1], [2, 1, 37, 2542, 13, 0], [1, 10, 41, 2542, 13, 1], [2, 10, 41, 2542, 13, 0], [3, 1, 50, 2542, 13, 0], [1, 10, 52, 2542, 13, 1], [1, 10, 75, 2542, 13, 0], [2, 9, 76, 2542, 13, 0], [1, 7, 93, 2542, 13, 1], [2, 7, 93, 2013, 13, 0],
    [1, 10, 27, 1589, 13, 1], [2, 2, 35, 1589, 13, 0], [1, 10, 43, 1589, 13, 1], [1, 10, 55, 1589, 13, 0], [2, 1, 64, 1589, 13, 1], [3, 1, 67, 1589, 13, 0], [1, 10, 81, 1589, 13, 0], [1, 10, 85, 1589, 13, 0], [2, 10, 85, 1589, 13, 1], [3, 10, 85, 1202, 13, 1],
    [1, 20, 30, 1111, 20, 1], [2, 20, 30, 1111, 20, 1], [3, 25, 25, 1111, 20, 0],
    [1, 10, 33, 894, 20, 1], [2, 1, 42, 894, 20, 1], [1, 10, 78, 894, 20, 0], [1, 2, 98, 894, 20, 0], [2, 1, 99, 744, 20, 0],
    [1, 10, 20, 455, 27, 0], [2, 7, 23, 455, 27, 0], [3, 10, 20, 455, 27, 1], [1, 10, 36, 455, 27, 1], [1, 10, 64, 455, 27, 1],
    [1, 10, 21, 276, 34, 0], [2, 5, 26, 276, 34, 0],
    [1, 10, 34, 862, 27, 1], [2, 20, 44, 862, 27, 0], [3, 12, 52, 862, 27, 1],
    [1, 10, 36, 538, 34, 0], [2, 5, 41, 538, 34, 0], [3, 4, 42, 455, 34, 1],
    [1, 10, 36, 180, 34, 0], [2, 8, 38, 180, 34, 0], [3, 8, 38, 180, 34, 1],
    # Penn State (2023 - Week 7)
    [1, 10, 28, 3254, 0, 1], [1, 10, 41, 3224, 0, 0], [2, 5, 46, 3205, 0, 1], [3, 3, 48, 3193, 0, 1], [1, 10, 56, 3154, 0, 0], [2, 7, 59, 3132, 0, 1], [1, 10, 66, 3101, 0, 1], [1, 10, 85, 3062, 0, 1], [2, 10, 85, 3057, 0, 1], [3, 10, 85, 3053, 0, 1],
    [1, 10, 26, 2951, 3, 0], [2, 8, 28, 2921, 3, 1], [3, 8, 28, 2902, 3, 1],
    [1, 10, 22, 2705, 0, 0], [2, 6, 26, 2660, 0, 0], [1, 10, 36, 2644, 0, 1], [2, 10, 36, 2638, 0, 1], [3, 10, 36, 2623, 0, 1],
    [1, 10, 13, 2450, 0, 0], [2, 7, 16, 2425, 0, 1], [1, 10, 31, 2405, 0, 0], [2, 3, 38, 2395, 0, 1],
    [1, 10, 39, 2679, 4, 0], [2, 3, 46, 2668, 4, 0], [1, 10, 52, 2628, 4, 0], [2, 10, 52, 2616, 4, 1], [3, 1, 61, 2590, 4, 0], [1, 10, 65, 2579, 4, 0], [2, 11, 74, 2554, 4, 1], [1, 10, 84, 2554, 4, 0], [2, 9, 85, 2520, 4, 0], [3, 10, 84, 2496, 4, 1], [1, 2, 98, 2482, 4, 0],
    [1, 10, 25, 1800, 7, 1], [2, 15, 20, 1800, 7, 1], [3, 9, 26, 1800, 7, 1],
    [1, 10, 7, 1571, 7, 0], [2, 6, 11, 1544, 7, 0], [3, 4, 13, 1522, 7, 1], [1, 15, 16, 1499, 7, 0], [2, 22, 9, 1451, 7, 1], [3, 27, 4, 1378, 7, 0],
    [1, 10, 35, 1232, 4, 0], [2, 9, 36, 1200, 4, 1], [1, 10, 48, 1184, 4, 1], [2, 1, 57, 1169, 4, 1], [1, 10, 61, 1141, 4, 0], [2, 5, 66, 1109, 4, 0], [3, 1, 69, 1078, 4, 0], [4, 1, 72, 1011, 4, 1],
    [1, 10, 43, 437, 7, 1], [1, 10, 58, 437, 7, 0], [2, 7, 61, 437, 7, 0],
    [1, 10, 10, 793, 7, 0], [2, 13, 7, 779, 7, 1], [1, 10, 35, 765, 7, 1], [1, 10, 64, 645, 7, 0], [2, 5, 69, 611, 7, 0], [1, 10, 74, 570, 7, 0], [2, 9, 75, 525, 7, 1], [3, 4, 81, 525, 7, 1],
    [1, 10, 28, 520, 14, 0], [2, 13, 69, 520, 14, 1], [3, 2, 80, 510, 14, 0], [1, 10, 83, 465, 14, 0], [2, 11, 82, 435, 14, 1], [3, 11, 82, 427, 14, 1],
    [1, 10, 47, 15, 7, 0],
    # Wisconsin
    [1, 10, 35, 3600, 0, 0], [2, 1, 44, 3600, 0, 1], [3, 1, 44, 3600, 0, 0], [1, 10, 46, 3600, 0, 1], [1, 10, 60, 3600, 0, 0], [2, 5, 65, 3600, 0, 0], [3, 3, 67, 3600, 0, 1],
    [1, 10, 44, 3062, 0, 0], [2, 4, 50, 3062, 0, 0], [3, 1, 53, 3062, 0, 1], [1, 10, 83, 3062, 0, 1], [2, 10, 83, 3062, 0, 0], [3, 4, 89, 3062, 0, 0],
    [1, 10, 24, 2786, 3, 1], [2, 5, 29, 2786, 3, 0], [3, 5, 29, 2786, 3, 1],
    [1, 10, 37, 2012, 3, 1], [2, 10, 37, 2012, 3, 0], [3, 6, 41, 2012, 3, 1], [1, 5, 81, 2012, 3, 1], [2, 5, 81, 2012, 3, 0], [1, 9, 91, 2011, 3, 1],
    [1, 10, 48, 1783, 3, 0], [2, 9, 59, 1783, 3, 1], [3, 1, 67, 1783, 3, 0], [1, 10, 69, 1783, 3, 1], [1, 10, 84, 1783, 3, 0], [2, 6, 88, 1536, 3, 1],
    [1, 10, 22, 1433, 3, 0], [2, 2, 30, 1433, 3, 0], [1, 10, 34, 1433, 3, 1], [2, 10, 34, 1433, 3, 1], [1, 10, 48, 1433, 3, 1], [2, 4, 54, 1433, 3, 0], [1, 10, 61, 1433, 3, 1],
    [1, 10, 25, 1680, 7, 0], [2, 10, 25, 1680, 7, 1], [1, 10, 41, 1680, 7, 0], [2, 11, 40, 1680, 7, 1], [3, 4, 47, 1680, 7, 1], [1, 10, 51, 1680, 7, 0], [2, 3, 58, 1680, 7, 0], [1, 10, 83, 1680, 7, 0], [2, 12, 81, 1334, 7, 1],
    [1, 10, 24, 1236, 7, 1], [2, 7, 27, 1236, 7, 0], [3, 7, 27, 1236, 7, 1],
    [1, 10, 46, 1236, 7, 0], [2, 5, 51, 1236, 7, 0], [3, 3, 53, 1236, 7, 0], [1, 10, 58, 1236, 7, 0], [2, 11, 69, 1236, 7, 1], [3, 8, 72, 789, 7, 1],
    [1, 10, 14, 669, 7, 0], [1, 10, 44, 669, 7, 0], [2, 7, 47, 669, 7, 1], [1, 10, 57, 669, 7, 0], [2, 7, 60, 669, 7, 1], [3, 8, 59, 669, 7, 1],
    [1, 10, 55, 315, 14, 0], [2, 8, 57, 315, 14, 0], [3, 8, 57, 315, 14, 0],
    [1, 10, 50, 175, 14, 0], [2, 8, 52, 175, 14, 0], [3, 6, 54, 175, 14, 0],
    # Rutgers
    [1, 10, 25, 3596, 0, 1], [2, 7, 28, 3570, 0, 0], [3, 6, 29, 3527, 0, 1],
    [1, 10, 54, 3077, 7, 0], [2, 4, 60, 3040, 7, 0], [1, 10, 67, 3005, 7, 0], [1, 10, 72, 2977, 7, 1], [1, 10, 82, 2941, 7, 0], [2, 6, 86, 2915, 7, 1],
    [1, 10, 27, 2814, 7, 0], [2, 6, 31, 2779, 7, 1], [1, 10, 40, 2762, 7, 1], [2, 6, 44, 2743, 7, 1], [1, 10, 51, 2708, 7, 1], [2, 19, 42, 2670, 7, 1], [3, 19, 42, 2624, 7, 1],
    [1, 10, 32, 2493, 7, 0], [2, 5, 37, 2459, 7, 0], [3, 7, 35, 2415, 7, 1], [4, 1, 41, 2395, 7, 0], [1, 10, 42, 2378, 7, 0], [1, 10, 53, 2345, 7, 1], [2, 7, 56, 2310, 7, 1], [3, 7, 56, 2243, 7, 1],
    [1, 10, 25, 2269, 1, 0], [2, 5, 30, 2228, 1, 0], [3, 5, 30, 2192, 1, 1],
    [1, 10, 41, 999, -2, 1],
    [1, 10, 29, 1284, 5, 0], [2, 11, 28, 1246, 5, 1], [3, 2, 37, 1209, 5, 1], [1, 10, 59, 1179, 5, 0], [2, 6, 83, 1121, 5, 0], [3, 1, 88, 1095, 5, 0], [1, 9, 91, 1059, 5, 0],
    [1, 10, 25, 842, 5, 1], [2, 9, 26, 809, 5, 1], [3, 9, 26, 795, 5, 1], [1, 9, 91, 766, 5, 1], [2, 9, 91, 748, 5, 0], [3, 4, 96, 722, 5, 1],
    [1, 10, 13, 490, 5, 0], [2, 8, 15, 444, 5, 0], [1, 10, 42, 420, 5, 0], [2, 8, 44, 384, 5, 1], [3, 8, 44, 380, 5, 1],
    [1, 10, 83, 251, 12, 0], [2, 2, 91, 207, 12, 0], [3, 1, 92, 195, 12, 0], [1, 6, 94, 137, 12, 0], [2, 8, 92, 131, 12, 0], [3, 2, 98, 127, 12, 1],
    # Michigan State (2023 - Week 10)
    [1, 10, 25, 3600, 0, 0], [2, 5, 30, 3600, 0, 0], [1, 10, 43, 3600, 0, 1], [2, 3, 50, 3600, 0, 0], [1, 10, 54, 3600, 0, 1], [1, 10, 65, 3600, 0, 0], [2, 3, 72, 3600, 0, 1], [1, 10, 81, 3140, 0, 0],
    [1, 10, 39, 2906, 7, 1], [1, 10, 51, 2906, 7, 0], [2, 6, 55, 2906, 7, 1], [1, 10, 74, 2816, 7, 1],
    [1, 10, 16, 2735, 14, 0], [2, 7, 19, 2735, 14, 1], [3, 4, 22, 2735, 14, 1], [1, 10, 47, 2735, 14, 1], [2, 10, 47, 2735, 14, 1], [3, 6, 51, 2735, 14, 1], [1, 10, 60, 2735, 14, 0], [2, 5, 65, 2735, 14, 0], [1, 10, 73, 2735, 14, 1], [2, 6, 77, 2735, 14, 0], [3, 4, 79, 2735, 14, 1], [1, 9, 91, 2700, 14, 0], [2, 9, 91, 2698, 14, 1],
    [1, 10, 2, 1516, 21, 0], [2, 8, 4, 1516, 21, 1], [3, 3, 9, 1516, 21, 0],
    [1, 10, 30, 1238, 18, 0], [2, 5, 35, 1238, 18, 1], [3, 5, 35, 1238, 18, 1], [1, 10, 48, 1238, 18, 1], [1, 10, 60, 1238, 18, 1], [1, 9, 91, 1110, 18, 0],
    [1, 10, 26, 941, 25, 0], [2, 7, 29, 941, 25, 1], [3, 7, 29, 941, 25, 1], [1, 10, 36, 941, 25, 1], [1, 10, 46, 941, 25, 1], [1, 10, 65, 941, 25, 1], [2, 1, 74, 941, 25, 0], [1, 10, 82, 915, 25, 1],
    [1, 10, 23, 750, 35, 1], [1, 10, 80, 750, 35, 0], [2, 8, 82, 750, 35, 1], [3, 8, 82, 750, 35, 1],
    [1, 10, 8, 491, 35, 0], [2, 9, 9, 491, 35, 0], [1, 10, 27, 491, 35, 0], [2, 14, 23, 491, 35, 1], [3, 6, 31, 491, 35, 1],
    [1, 10, 8, 900, 35, 0], [2, 10, 8, 900, 35, 0], [1, 10, 35, 900, 35, 1], [2, 3, 42, 900, 35, 0], [1, 10, 52, 900, 35, 0], [2, 4, 58, 900, 35, 1], [1, 10, 72, 900, 35, 0], [2, 5, 77, 900, 35, 1], [3, 6, 76, 567, 35, 1],
    [1, 10, 23, 396, 35, 0], [2, 7, 20, 396, 35, 0], [3, 8, 25, 396, 35, 0],
    [1, 10, 51, 121, 35, 0], [2, 5, 56, 121, 35, 0], [3, 8, 53, 121, 35, 0],

    # 2023-24 Week 11 Minnesota
    [1, 10, 31, 3600, 0, 0], [2, 6, 35, 3600, 0, 1], [1, 10, 47, 3600, 0, 1], [1, 10, 68, 3600, 0, 0], [2, 7, 71, 3600, 0, 0], [3, 4, 74, 2816, 0, 1],
    [1, 10, 25, 2736, 7, 0], [2, 4, 31, 2736, 7, 1], [1, 10, 52, 2736, 7, 0], [2, 8, 54, 2736, 7, 0], [1, 10, 69, 2736, 7, 1], [1, 10, 79, 2736, 7, 0], [2, 10, 79, 2379, 7, 0],
    [1, 10, 44, 2197, 10, 1], [1, 10, 56, 2197, 10, 0], [2, 11, 55, 2197, 10, 1], [3, 11, 55, 2197, 10, 1],
    [1, 10, 25, 2038, 10, 0], [2, 7, 28, 2038, 10, 0], [1, 10, 35, 2038, 10, 0], [2, 9, 36, 2038, 10, 1], [1, 10, 50, 1800, 10, 1], [2, 7, 53, 1800, 10, 0], [3, 1, 59, 1800, 10, 0], [1, 10, 60, 1800, 10, 1], [2, 10, 60, 1800, 10, 0], [3, 8, 62, 1800, 10, 0], [4, 8, 62, 1500, 10, 1],
    [1, 10, 4, 1198, 13, 0], [2, 12, 2, 1198, 13, 1],
    [1, 10, 14, 1069, 13, 0], [1, 10, 28, 1069, 13, 0], [2, 9, 29, 1069, 13, 0], [1, 10, 43, 1069, 13, 1], [2, 10, 43, 1069, 13, 0], [3, 10, 43, 829, 13, 1],
    [1, 10, 4, 762, 20, 0], [2, 1, 13, 762, 20, 1], [1, 10, 25, 762, 20, 0], [2, 9, 26, 762, 20, 1], [1, 10, 39, 762, 20, 0], [2, 6, 43, 762, 20, 1],
    [1, 10, 20, 373, 27, 0], [2, 12, 18, 373, 27, 0], [3, 1, 29, 373, 27, 0], [1, 10, 32, 373, 27, 1], [2, 8, 34, 373, 27, 0], [3, 3, 39, 373, 27, 0], [1, 10, 42, 373, 27, 0],
    [1, 10, 38, 226, 34, 0], [2, 8, 40, 226, 34, 0], [1, 10, 60, 226, 34, 0], [2, 9, 61, 226, 34, 0], [3, 4, 66, 226, 34, 0], [1, 10, 75, 226, 34, 0], [2, 5, 80, 226, 34, 0],
    [1, 10, 26, 114, 37, 0], [2, 9, 27, 114, 37, 0], [3, 7, 29, 114, 37, 0],

    # 2023-24 Week 12 Michigan
    [1, 10, 25, 3600, 0, 0], [2, 7, 28, 3600, 0, 0], [3, 2, 33, 3600, 0, 1], [1, 10, 48, 3600, 0, 0], [2, 4, 54, 3600, 0, 1], [1, 10, 81, 3014, 0, 0],
    [1, 10, 30, 2568, 7, 0], [2, 6, 34, 2568, 7, 0], [3, 6, 34, 2568, 7, 1],
    [1, 10, 2, 2397, 7, 0], [2, 10, 2, 2397, 7, 1], [3, 10, 2, 2397, 7, 1],
    [1, 10, 44, 2197, 4, 0], [2, 10, 44, 2197, 4, 1],
    [1, 10, 25, 2038, 4, 1], [2, 8, 27, 2038, 4, 1],
    [1, 10, 44, 1858, 4, 0], [2, 9, 45, 1858, 4, 1], [1, 10, 73, 1858, 4, 0],
    [1, 10, 35, 1269, 4, 0], [2, 10, 35, 1269, 4, 0], [3, 10, 35, 1269, 4, 1], [1, 10, 48, 1269, 4, 0], [2, 7, 51, 1269, 4, 0], [1, 10, 61, 1269, 4, 0], [2, 5, 66, 1269, 4, 1],
    [1, 10, 12, 829, 4, 0], [2, 9, 13, 829, 4, 1], [1, 10, 20, 829, 4, 0], [2, 9, 21, 829, 4, 0], [3, 1, 29, 829, 4, 0],
    [1, 10, 25, 303, -1, 1], [2, 1, 34, 303, -1, 0], [1, 10, 38, 303, -1, 0],
    [1, 10, 25, 188, -1, 0], [2, 4, 31, 188, -1, 1], [1, 10, 48, 188, -1, 0], [2, 7, 51, 188, -1, 0], [1, 10, 62, 188, -1, 1], [2, 4, 68, 188, -1, 1],
    [1, 10, 25, 59, -1, 0], [2, 9, 26, 59, -1, 1], [3, 5, 30, 59, -1, 0], [1, 10, 38, 59, -1, 1],
]

# Create a pandas DataFrame
columns = ['Down', 'Distance', 'Yards From Own Goal', 'Total Seconds Left', 'Score Difference', 'Play Type'] # Just the headers for the data table
df = pd.DataFrame(full_season_data, columns=columns) # Creates pandas DataFrame named df from the ful_season_data list assigning the headers to appropraite colums

print("--- Data Loaded ---") # Just prints that line
print(f"Total plays in the dataset: {len(df)}") # Prints number of rows in the DataFrame
print(df.head()) #Prints the first 5 rows of the Data Frame to allow for inspection and confrim that it loaded correctly
print("\n")


# --- 2. Feature and Target Separation ---

# The features are all columns except 'Play Type'
features = df.drop('Play Type', axis=1) # Cretes new DataFrame named features, but without the play type column... These are the inputs for our model...inputs (x)
# The target is the 'Play Type' column
labels = df['Play Type'] # This is the target we want the model to predict (y)

# Get the number of features, which determines the number of qubits needed.
num_features = features.shape[1]  # This attribute returns a tuple representing 
                                  #the dimensions of the features DataFrame: (number_of_rows, number_of_columns)


# --- 3. Data Splitting and Scaling ---

# Set a seed for reproducibility
seed = 42 # Defines a variable seed with an arbitrary number
np.random.seed(seed) #sets the seed for the NumPy random number generator. 
                     #This is done to esnure reprcoducahility so that the same result each time

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split( #Shuffles and splits the data
    features, labels, test_size=0.2, random_state=seed #The input features and target labels to be split.20% will tested while 80% will train the set
) # random_state=seed: Uses the predefined seed to ensure the shuffle and split are the same every time.
  # The function returns four new variables containing the split data: 
  # X_train (training features), X_test (testing features), y_train (training labels), and y_test (testing labels).

# Scale the features to a range between 0 and 1. This is crucial for
# encoding the data into the quantum circuit, as the values are often
# used as rotation angles for the gates.
scaler = MinMaxScaler() #  Creates an instance of the MinMaxScaler object.
X_train_scaled = scaler.fit_transform(X_train) #analyzes X_Train to find the minimum and maximum value for each feature column
X_test_scaled = scaler.transform(X_test) # It then sues these mlearned min/max values to scale X_train so that all of its value fall between value between 0 and 1. 
                                         # The result is the storesd in X_trained_scaled

print("--- Data Processed ---")
print(f"Number of training samples: {len(X_train_scaled)}")
print(f"Number of testing samples: {len(X_test_scaled)}")
print(f"Number of features (qubits): {num_features}")
print("\n")


# --- 4. Quantum Circuit Definition ---

# A. Feature Map: Encodes classical data into the quantum state.
# We use the ZZFeatureMap, which is a common choice for VQCs. It creates
# entangling gates between qubits representing different features.
feature_map = ZZFeatureMap(feature_dimension=num_features, reps=2, entanglement='linear')
# feature_dimension=num_features: Tells the circuit it needs to handle a number of features equal to num_features (which is 5). 
# This sets the number of qubits to 5.
# Reps=2: The internal pattern of gates in the feature map will be repeated 2 times to create a more complex encoding.
# entanglement='linear': Specifies that each qubit should be entangled with its immediate neighbor (qubit 0 with 1, 1 with 2, etc.).


print("--- Feature Map Circuit ---")
print(feature_map)
print("\n")


# B. Ansatz (Variational Form): The trainable part of the circuit.
# We use RealAmplitudes, a circuit with layers of single-qubit Y rotations
# and entangling CNOT gates. The rotation angles are the parameters
# that the optimizer will "tune" during training.
ansatz = RealAmplitudes(num_qubits=num_features, reps=3)
# num_qubits=num_features: This circuit must have the same number of qubits as the feature map.
# reps=3: The internal pattern of trainable rotation gates and entangling CNOT gates is repeated 3 times. 
# More repetitions mean more trainable parameters and a more powerful (but harder to train) model.
# 


print("--- Ansatz Circuit ---")
print(ansatz)
print("\n")

# --- 5. VQC Model Construction and Training ---

# Define the optimizer. COBYLA is a good gradient-free optimizer suitable for
# the noisy and complex loss landscapes often found in quantum machine learning.
optimizer = SPSA(maxiter=100)
# SPSA(maxiter=100): Creates an instance of the SPSA optimizer. 
# maxiter=100 sets a limit, telling the optimizer to run for a maximum of 100 training iterations.


# Set up the quantum instance. We will use the 'statevector_simulator' for now,
# which provides a fast, noise-free simulation of the quantum computer.
quantum_instance = Sampler()
# Sampler(): Creates an instance of the Sampler. 
# By default, with no arguments, it configures a fast, local, noise-free classical simulator to act like a quantum computer.

# Construct the VQC model by combining the feature map, ansatz, and optimizer.
vqc = VQC(
    feature_map=feature_map,
    ansatz=ansatz,
    optimizer=optimizer,
    sampler=quantum_instance  # Use 'sampler' instead of 'quantum_instance'
# This line assembles the final VQC model. It takes all the pieces we defined—the feature_map for data encoding, 
# the ansatz for training, the optimizer to guide the training, and the sampler to run the circuits—and bundles them 
# into a single vqc object.
)

print("--- Training Quantum Model ---")
print("This may take a few minutes...")

# Train the VQC model
vqc.fit(X_train_scaled, y_train.values)
# vqc.fit(...): This command starts the training process. 
# The fit method takes the scaled training features (X_train_scaled) and the corresponding training labels (y_train.values) 
# and begins the hybrid optimization loop that tunes the parameters in the ansatz.

print("Quantum Model Training Complete.")
print("\n")


# --- 6. Evaluation ---

# Predict the labels for the test set
# vqc.predict(X_test_scaled): Now that the model is trained, this line uses it to make predictions on the scaled test data, 
# which the model has never seen before. The results are stored in vqc_preds.
vqc_preds = vqc.predict(X_test_scaled)

# Calculate the accuracy of the VQC model
# accuracy_score(...): This function compares the model's predictions (vqc_preds) to the true, known labels (y_test.values) 
# and calculates the percentage of correct answers. This score is stored in vqc_accuracy.
vqc_accuracy = accuracy_score(y_test.values, vqc_preds)

print(f"VQC Accuracy: {vqc_accuracy:.4f}")

# --- 7. Classical Baseline Comparison ---
# It's always a good idea to compare your quantum model to a classical one
# to get a sense of its performance in context.
print("\n--- Training Classical Model for Comparison ---")
svm_model = SVC(random_state=seed)
svm_model.fit(X_train_scaled, y_train.values)
svm_preds = svm_model.predict(X_test_scaled)
svm_accuracy = accuracy_score(y_test.values, svm_preds)

print(f"Classical SVM Accuracy: {svm_accuracy:.4f}")
print("\n")
print("--- Script Finished ---")
